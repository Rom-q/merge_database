<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>